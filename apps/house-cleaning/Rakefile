#####################################################################################################################
### => Description  A simple ruby rake script for performing house cleaning functions on a directory, such as
#                   renaming all files to an incrementing number. Eg IMG_13302.jpg becomes 0.jpg, IMG_13303.jpg
#                   becomes 1.jpg, and IMG_13304.GIF becomes 2.gif. The script will then attempt to locate all
#                   duplicate files in the folder, and then move them to a duplicate folder.
#
### => Author       https://github.com/davidkirwan
#
### => Licence      GPL 2.0
#
#####################################################################################################################

### => STD Lib Imports
require 'logger'
require 'date'
require 'benchmark'

### => Custom Imports
scriptPath = File.expand_path(File.dirname(__FILE__))
require scriptPath + '/lib/config_reader.rb'
require scriptPath + '/lib/calculate_hashes.rb'
require scriptPath + '/lib/find_duplicates.rb'
require scriptPath + '/lib/move_duplicates.rb'

### => Variables
# Date, used in some of the directory/filename generation
date = DateTime.now
the_date = date.year.to_s() + "-" + "%02d" %  date.month.to_s() + "-" + "%02d" %  date.day.to_s()

unless File.directory?("#{scriptPath}/logs") then FileUtils.mkdir("#{scriptPath}/logs") end
log = Logger.new("#{scriptPath}/logs/#{the_date}.log")
# Set the logging output level
log.level = Logger::DEBUG
#log.level = Logger::WARN
#log.level = Logger::INFO

# Variable to store configuration settings read in from file
@data = nil

# Array of Hash containing path and sha values
@file_list = nil

# Number of duplicate files found
@duplicate_count = 0

############################### => Default Task
task :default => 'menu'

task :menu do
  puts <<-eos
rake house_clean  # Performs house cleaning tasks
  eos
end

task :read_config do
  log.info ":read_config task executing"
  log.debug Benchmark.measure {
  path = ENV["properties"] || scriptPath + '/config.yaml'
  log.debug "Reading the #{path} file."
  begin
    @data = ConfigReader.load(path, log)
  rescue Exception => e
    log.fatal e.message
    exit()
  end
  log.debug @data.inspect
  }.to_s
  log.info ":read_config done"
end

task :calculate_hashes do
  log.debug ":calculate_hashes executing"
  log.debug Benchmark.measure {
  begin
    @file_list = CalculateHashes.calculate_hash_list(@data["path"], log)
    log.debug @file_list.inspect
  rescue Exception => e
    log.fatal e.message
    exit()
  end
  }.to_s
  log.debug ":calcualte_hashes done"
end

task :find_duplicates do
  log.debug ":find_duplicates executing"
  log.debug Benchmark.measure {
  begin
    @duplicate_list = FindDuplicates.deal_with_duplicates(@file_list, log)
    log.debug @duplicate_list.inspect
  rescue Exception => e
    log.fatal e.message
    exit()
  end
  }.to_s
  log.debug ":find_duplicates done"
end

task :move_duplicates do
  log.debug ":move_duplicates executing"
  log.debug Benchmark.measure {
  begin
    @duplicate_count = MoveDuplicates.deal_with_duplicates(@file_list, @duplicate_list, @data["path"], log)
    log.debug "Duplicates found: #{@duplicate_count}"
  rescue Exception => e
    log.fatal e.message
    exit()
  end
  }.to_s
  log.debug ":move_duplicates done"
end

desc "Perform house cleaning tasks"
task :house_clean => [:read_config, :calculate_hashes, :find_duplicates, :move_duplicates] do
  log.debug "House keeping complete"
end
